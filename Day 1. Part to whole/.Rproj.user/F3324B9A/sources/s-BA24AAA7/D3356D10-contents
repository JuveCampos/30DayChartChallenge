# Tercera Función para generar el mapa ----
library(tidyverse)
library(sf)
library(leaflet)

# Bases de metadatos ----
espacio_inicio = function(metadatos){
  metadatos %>%
    mutate(spcUnidades = str_detect(Unidades, "^\\s") ,
           Unidades = ifelse(spcUnidades, Unidades,
                             ifelse(Unidades == "%",
                                    "%",
                                    str_c(" ", Unidades)
                             ))
    ) %>%
    mutate(Unidades = ifelse(is.na(Unidades), yes = " ", no = Unidades)) %>%
    select(-spcUnidades)
}

meta_muni = readxl::read_xlsx("www/01_Datos/metadatos/metadatos_municipios_1.xlsx") %>%
  espacio_inicio()
meta_dttos = readxl::read_xlsx("www/01_Datos/metadatos/metadatos_dttos_1.xlsx") %>%
  espacio_inicio()

# Contenido ----
contenido <- readxl::read_xlsx("www/01_Datos/contenido/contenido.xlsx")

# Reportes ----
reportes <- readxl::read_xlsx("www/01_Datos/reportes/datos_reportes2.xlsx") %>%
  mutate(ID_DISTRITO = as.numeric(ID_DISTRITO))

# Opciones posibles ----
agregaciones = c("Municipios", "Distritos")
agrupaciones_municipios = meta_muni %>% filter(Clasificador == "SI") %>% pull(FIELD)
agrupaciones_dttos = meta_dttos %>% filter(Clasificador == "SI") %>% pull(FIELD)

# Grupos posibles del agregado uno ----
v_uniq_dttos = readRDS("www/01_Datos/clasificadores/valores_unicos_dtto.rds")
v_uniq_muni = readRDS("www/01_Datos/clasificadores/valores_unicos_muni.rds")

# GEOMETRIAS ----
geom_mpios = read_rds("www/01_Datos/geometrias/municipios_2.rds")
geom_dttos = read_rds("www/01_Datos/geometrias/distritos_2.rds")
geom_entidad = read_rds("www/01_Datos/geometrias/geom_entidades.rds")

# Funciones ----


# Opciones_filtros
opts_filtros <- function(agregacion = "Municipios"){

  if(agregacion == "Municipios"){
    # choices = c("Por Estados" = "Por Estados",
    #             "Por tipo de Municipio" = "TIPO_MUN",
    #             "Por cuenca" = "CUENCA",
    #             "Por Municipios pertenecientes a alguna Zona Metropolitana" = "METRO",
    #             "Por Zona Metropolitana" = "ZONA_METRO",
    #             "Por partido en el gobierno" = "GOBIERNO",
    #             "Por estados con elecciones a gobernador en 2021" = "GOB 2021",
    #             "Por estados seleccionados por Alternativa Por México" = "ALTERNATIVAS",
    #             "Por entidades de la alianza federalista" = "ALIANZA_FED",
    #             "Por región" = "NOM_MESO",
    #             "Por subregión" = "NOM_SUBREG",
    #             "Por municipios de costa" = "COSTA",
    #             "Por municipios de frontera" = "FRONTERA"
    # )

    raw = meta_muni %>%
      filter(Clasificador == "SI") %>%
      select(FIELD, DESCRIPTOR)
    choices = raw$FIELD
    names(choices) = str_c("Por ", raw$DESCRIPTOR)

  } else if (agregacion == "Distritos") {
    raw = meta_dttos %>%
      filter(Clasificador == "SI") %>%
      select(FIELD, DESCRIPTOR)
    choices = raw$FIELD
    names(choices) = str_c("Por ", raw$DESCRIPTOR)
    # append(c("Por Estados" = "Por Estados"), choices)
  }
  return(choices)

}


# Función norte
norte <- function(mapa_leaflet,
                  ancho = 40,
                  position = 'topleft',
                  direccion_img_norte = "http://ian.umces.edu/imagelibrary/albums/userpics/10002/normal_ian-symbol-north-arrow-2.png"){
  # 1. Descargamos la imagen
  north.arrow.icon <- paste0("<img src='",
                             direccion_img_norte,
                             "' style='width:",
                             as.character(ancho), "px;'>")
  # Lo incluimos en una funcion de RLeaflet
  if (!require("leaflet")) install.packages("leaflet") # Asegurarnos que este instalado Leaflet
  addControl(mapa_leaflet,
             html = north.arrow.icon, position = position,
             className = "fieldset {
             border: 0;}")
}

# Negritas
b <- function(x, color = "black") str_c("<b style = 'color: ", color, ";'>",x,"</b>")
# Quiebres
br <- "<br>"

# Obtener grupos de las variables de agrupamiento
obt_agrupacion = function(agregacion = "Municipios"){
  if(agregacion == "Municipios"){
    meta_muni %>%
      filter(Clasificador == "SI") %>%
      pull(FIELD)
  } else if(agregacion == "Distritos") {
    meta_dttos %>%
      filter(Clasificador == "SI") %>%
      pull(FIELD)
  }
}

panel_condicion <- function(agregacion = "Municipios"){
  if(agregacion == "Municipios"){

    a = str_c("input.selFiltroEspecial == ", " '", meta_muni %>%
            filter(Clasificador_especial == "SI") %>%
            pull(FIELD), "'", collapse = " | ")

    # a = "input.selFiltroEspecial ==  'Municipios_en_distrito'"
  } else if(agregacion == "Distritos") {

  }
  return(a)
}

# agregacion = "Municipios"
# agrupacion = "Municipios_en_distrito"

obt_grupos = function(agregacion = "Municipios",
                      agrupacion = "ENTIDAD"){

  if(agregacion == "Municipios"){
    valores_unico = v_uniq_muni[[agrupacion]]
  } else if (agregacion == "Distritos"){
    valores_unico = v_uniq_dttos[[agrupacion]]
  }
  return(valores_unico)
}

categorias_variables <- function(agregacion = "Municipios"){

  if(agregacion == "Municipios"){
    categorias = meta_muni  %>%
      pull(Clasificacion) %>%
      unique()
    categorias = categorias[!(categorias %in% c("ID","CLASIFICADOR"))]

  } else if(agregacion == "Distritos") {
    categorias = meta_dttos  %>%
      pull(Clasificacion) %>%
      unique()
    categorias = categorias[!(categorias %in% c("ID","Clasificador", "Claves INE"))]
  }
  return(categorias)

}

opciones_variable = function(agregacion, categoria){

  if(agregacion == "Municipios"){
    opts = meta_muni %>%
      filter(Clasificador == "NO") %>%
      filter(Clasificacion == categoria)
    opciones = opts$FIELD
    names(opciones) = opts$DESCRIPTOR

  } else if(agregacion == "Distritos") {
    opts = meta_dttos %>%
      filter(Clasificador == "NO") %>%
      filter(Clasificacion == categoria)
    opciones = opts$FIELD
    names(opciones) = opts$DESCRIPTOR
  }

  return(opciones)

}

gen_datos = function(agregacion,agrupacion,grupo,variable){

  if(agregacion == "Municipios"){

    agrupamiento = read_rds(str_c("www/01_Datos/indicadores/rds/rds_municipios/",
                                  agrupacion,
                                  ".rds")) %>%
      filter(value == grupo) %>%
      select(CVEGEO_INEGI = CLAVE_MUN,
             grupo = name,
             agrupamiento = value)

    # Función reducida
    mapa = right_join(geom_mpios, agrupamiento)
    tabla_variable = read_rds(str_c("www/01_Datos/indicadores/rds/rds_municipios/",
                                    variable,
                                    ".rds")) %>%
      rename(CVEGEO_INEGI = CLAVE_MUN)

    data = left_join(mapa, tabla_variable) %>%
      filter(!is.na(value))

  } else if(agregacion == "Distritos"){

    print("Etapa_1")
    agrupamiento = read_rds(str_c("www/01_Datos/indicadores/rds/rds_distritos/",
                                  agrupacion,
                                  ".rds")) %>%
      filter(value == grupo) %>%
      select(CLAVE_ENT,
             ID_DISTRITO,
             grupo = name,
             agrupamiento = value)

    # Función reducida
    mapa = right_join(geom_dttos, agrupamiento)
    print("Etapa_2")
    tabla_variable = read_rds(str_c("www/01_Datos/indicadores/rds/rds_distritos/",
                                    variable,
                                    ".rds"))

    data = left_join(mapa, tabla_variable) %>%
      filter(!is.na(value))
  }

  return(data)

}

gen_metadatos = function(agregacion, variable){
  if(agregacion == "Municipios"){
    mta <- meta_muni %>%
      filter(FIELD == variable)
  }
  if(agregacion == "Distritos"){
    mta <- meta_dttos %>%
      filter(FIELD == variable)
  }
  return(mta)
}

gen_popup <- function(datos,metadato,agregacion){

  if(class(datos$value) == "character"){
    valor = str_c(prettyNum(datos$value,
                            big.mark = ","),
                  ifelse(is.na(metadato$Unidades[1]),
                         yes = "",
                         no = metadato$Unidades[1]))
  } else {
    valor = str_c(prettyNum(round(datos$value, 2),
                            big.mark = ","),
                  ifelse(is.na(metadato$Unidades[1]),
                         yes = "",
                         no = metadato$Unidades[1]))
  }

  if(agregacion == "Municipios"){
    popup = datos %>%
      mutate(value = ifelse(is.na(value), "NA", value)) %>%
      mutate(popup = paste0(b("Entidad: " ), ENTIDAD, br,
                            b("Municipio: "), NOM_MUN, br,
                            b("Variable: "), metadato$DESCRIPTOR[1], br,
                            b("Valor: "),  valor,
                            br)) %>%
      pull(popup)

  } else if(agregacion == "Distritos") {

    datos <- left_join(datos, reportes)

    popup = datos %>%
      mutate(value = ifelse(is.na(value), "NA", value)) %>%
      mutate(popup = paste0(b("Entidad: " ), ENTIDAD, br,
                            b("Distrito: "), ID_DISTRITO, br,
                            b("Variable: "), metadato$DESCRIPTOR[1], br,
                            b("Valor: "),  valor, br,
                            "<a target = '_blank' href = '",
                                 enlace_aws,
                                 "'>Descargar reporte distrital</a>",
                            br)) %>%
      pull(popup)
  }

  return(popup)

}




paleta_colores <- function(datos,metadato){

  # Clase
  clase <- metadato$tipo_paleta

  # Creamos la paleta
  if(clase == "tipo_num"){
    pal <- colorNumeric(palette = "viridis",
                        domain = datos$value)
  } else {

    if(clase == "tipo_partido"){

      col_partidos <- tribble(
        ~Partido, ~Color,
        "PAN", "#0049d1",
        "PRI", "#de0f00",
        "PRD", "#ded300",
        "MC", "#de8d00",
        "PVEM", "#00de55",
        "MORENA", "#a30000",
        "NA", "#02ada2",
        "PANAL", "#02ada2",
        "IND", "#b3009b",
        "PT", "#b33c00",
        "ES", "#2f0485",
        "NO", "#000000",
        "SIN VOTOS", "gray",
        "PRI_PVEM_NA", "#004d2d",
        "PT_MORENA_ES", "#4d2000",
        "PAN_PRD_MC", "#001c4d") %>%
        mutate(Partido = factor(Partido,
                                levels = Partido))

      col_partidos_vct = setNames(col_partidos$Color, col_partidos$Partido)

      datos_partido = sort(unique(datos$value))

      pal <- colorFactor(domain = datos_partido,
                         palette = str_replace_all(datos_partido,
                                                   col_partidos_vct),
                         rev = FALSE)


    } else if(clase == "tipo_voto_partido") {

      pal <- colorNumeric(palette = unlist(str_split(metadato$colores, "; ")),
                          domain = datos$value)
    } else {
      pal <- colorFactor(palette = "magma",
                         domain = datos$value)
    }
  }
  return(pal)
}

mapa <- function(datos,popup,paleta,metadato,agregacion){

  if(agregacion == "Municipios"){
   filtro = unique(datos$cve_ent)
  } else if(agregacion == "Distritos") {
   filtro = unique(datos$CLAVE_ENT)
  }

  perimetro_estatal = geom_entidad %>%
    filter(CVE_EDO %in% filtro)
  color_perimetro_estatal = "red"
  peso_edos = 4

  # datos = st_cast(datos)

  burbujas.si = metadato$Burbujas[1]

  # 3.- Generamos un mapa

  if(agregacion == "Municipios"){

    if(metadato$tipo_paleta[1] == "tipo_voto_partido"){
      provider = providers$CartoDB.DarkMatter
      color_contorno = "black"
      logo = "https://github.com/JuveCampos/Repositorio-de-Mapas-y-Visualizaciones/raw/main/resources/logos/Mexico%20Big%20Data/MEXICO_BIGDATA_LOGOTIPO_HORIZONTAL_ESLOGAN-01.jpg"
    } else {
      provider = providers$CartoDB.Positron
      color_contorno = "white"
      logo = "https://github.com/JuveCampos/Repositorio-de-Mapas-y-Visualizaciones/raw/main/resources/logos/Mexico%20Big%20Data/MEXICO_BIGDATA_LOGOTIPO_HORIZONTAL_ESLOGAN-01.png"
    }

    if(burbujas.si == 0){

      leaflet(datos) %>%
        addProviderTiles(provider) %>%
        addPolygons(color = color_contorno,
                    fillColor = paleta(datos$value),
                    group = "Poligonos",
                    highlightOptions = highlightOptions(color = "white",
                                                        weight = 2,
                                                        bringToFront = FALSE),
                    label = lapply(str_c("<b style = 'color:#005441;'>Municipio: </b><br>", datos$NOM_MUN, ", ", datos$ENTIDAD), htmltools::HTML),
                    popup = popup,
                    weight = 1,
                    opacity = 1,
                    fillOpacity = 1) %>%

        addLegend(title = str_replace_all(str_wrap(metadato$DESCRIPTOR[1], 30),
                                          pattern = "\\n",
                                          replacement = "<br>"),
                  opacity = 1,
                  pal = paleta,
                  values = datos$value,
                  labFormat = labelFormat(suffix = metadato$Unidades[1]),
                  position = "bottomright") %>%
        # norte(position = "topright") %>%
        # PERIMETRO_ESTATAL
        addPolygons(data = perimetro_estatal,
                    fill = NA,
                    color = color_perimetro_estatal,
                    weight = peso_edos) %>%
        norte(position = "topright",
              ancho = "180",
              direccion_img_norte = logo)

    } else if(burbujas.si == 1)  {

      ctrd = st_centroid(datos)
      ctrd$radius = (datos$value-min(datos$value, na.rm = T))/max((datos$value-min(datos$value, na.rm = T)), na.rm = T)


      leaflet(ctrd) %>%
        addProviderTiles(provider) %>%
        addPolygons(data = datos,
                    fill = NA,
                    group = "Burbujas",
                    color = "white",
                    weight = 1, opacity = 1) %>%
        addCircleMarkers(fillColor = paleta(datos$value),
                         radius = ctrd$radius * 50,
                         group = "Burbujas",
                         color = "white",
                         label = lapply(str_c("<b style = 'color:#005441;'>Municipio: </b><br>", datos$NOM_MUN, ", ", datos$ENTIDAD), htmltools::HTML),
                         popup = popup,
                         weight = 1,
                         opacity = 1,
                         fillOpacity = 0.6) %>%
        addPolygons(data = datos,
                    color = color_contorno,
                    fillColor = paleta(datos$value),
                    group = "Poligonos",
                    highlightOptions = highlightOptions(color = "white",
                                                        weight = 2,
                                                        bringToFront = FALSE),
                    label = lapply(str_c("<b style = 'color:#005441;'>Municipio: </b><br>", datos$NOM_MUN, ", ", datos$ENTIDAD), htmltools::HTML),
                    popup = popup,
                    weight = 1,
                    opacity = 1,
                    fillOpacity = 1) %>%
        addLegend(title = str_replace_all(str_wrap(metadato$DESCRIPTOR[1], 30),
                                          pattern = "\\n",
                                          replacement = "<br>"),
                  opacity = 1,
                  pal = paleta,
                  values = datos$value,
                  labFormat = labelFormat(suffix = metadato$Unidades[1]),
                  position = "bottomright") %>%
        addLayersControl(
          baseGroups = c("Poligonos", "Burbujas"),
          options = layersControlOptions(collapsed = FALSE)) %>%
        # norte(position = "topright") %>%
        # PERIMETRO_ESTATAL
        addPolygons(data = perimetro_estatal,
                    fill = NA,
                    color = color_perimetro_estatal,
                    weight = peso_edos) %>%
        norte(position = "topright",
              ancho = "180",
              direccion_img_norte = logo)

    }

  } else if(agregacion == "Distritos"){

    if(metadato$tipo_paleta[1] == "tipo_voto_partido"){
      provider = providers$CartoDB.DarkMatter
      color_contorno = "black"
    } else {
      provider = providers$CartoDB.Positron
      color_contorno = "white"
    }

    leaflet(datos) %>%
      addProviderTiles(provider) %>%
      addPolygons(color = color_contorno,
                  fillColor = paleta(datos$value),
                  group = "Poligonos",
                  highlightOptions = highlightOptions(color = "white",
                                                      weight = 2,
                                                      bringToFront = FALSE),
                  label = lapply(str_c("<b style = 'color:#005441;'>Distrito: </b><br>", datos$ID_DISTRITO, ", ", datos$ENTIDAD, "<br>",
                                       "<b style = 'color:#005441;'>Cabecera distrital: </b><br>", datos$cabecera_distrital),
                                 htmltools::HTML),
                  popup = popup,
                  weight = 1,
                  opacity = 1,
                  fillOpacity = 1) %>%

      addLegend(title = str_replace_all(str_wrap(metadato$DESCRIPTOR[1], 30),
                                        pattern = "\\n",
                                        replacement = "<br>"),
                opacity = 1,
                pal = paleta,
                values = datos$value,
                labFormat = labelFormat(suffix = metadato$Unidades[1]),
                position = "bottomright") %>%
      # norte(position = "topright") %>%
      # PERIMETRO_ESTATAL
      addPolygons(data = perimetro_estatal,
                  fill = NA,
                  color = color_perimetro_estatal,
                  weight = peso_edos,
                  opacity = 1) %>%
      norte(position = "topright",
            ancho = "180",
            direccion_img_norte = "https://github.com/JuveCampos/Repositorio-de-Mapas-y-Visualizaciones/raw/main/resources/logos/Mexico%20Big%20Data/MEXICO_BIGDATA_LOGOTIPO_HORIZONTAL_ESLOGAN-01.jpg")
  }
}


# Parámetros de entrada ----
############################################################
agregacion = "Distritos"
agrupacion = obt_agrupacion(agregacion)[1]
grupo = obt_grupos(agregacion, agrupacion)[2]
grupo
# variable = opciones_variable(agregacion = agregacion)
variable = "PAN+"
# Generamos el dato ----
(datos = gen_datos(agregacion,
                   agrupacion,
                   grupo,
                   variable))

(metadato = gen_metadatos(agregacion,
                          variable))
(popup = gen_popup(datos, metadato, agregacion))
(paleta = paleta_colores(datos, metadato))
(mapa(datos,popup,paleta,metadato,agregacion))
# ############################################################




